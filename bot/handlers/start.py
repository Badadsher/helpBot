from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import FSInputFile, BufferedInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlmodel import select, Session
from bot.models.user import User
from bot.db import engine
from datetime import datetime, timedelta
import asyncio
from sqlalchemy import func
from bot.models.usermood import UserMood
from bot.models.usermood import UserMood, get_weekly_average
from bot.models.message import MessageHistory
from bot.models.message import MessageCounter
from bot.models.psychotype import UserPsychotype
from bot.models.weekly_report import WeeklyReport
from bot.services.analyze_user import analyze_user_profile
import io
from bot.models.payment import PaymentHistory
import plotly.graph_objects as go
import re

router = Router()
class UserForm(StatesGroup):
    accept_intro = State()  # –Ω–∞–∂–∞–ª "–ü—Ä–∏–≤–µ—Çüëãüèª"
    accept_terms = State()  # –Ω–∞–∂–∞–ª "–î–∞‚úÖ"
    name = State()
    gender = State()
    age = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
def main_menu_keyboard() -> types.ReplyKeyboardMarkup:
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üó£ –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥")],
            [types.KeyboardButton(text="üìä –ú–æ–π –∞–Ω–∞–ª–∏–∑"), types.KeyboardButton(text="üìú –£—Å–ª–æ–≤–∏—è")],
            [types.KeyboardButton(text="‚ùì –í–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç"), types.KeyboardButton(text="üíé –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞")]
        ],
        resize_keyboard=True
    )

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
def dialog_keyboard() -> types.ReplyKeyboardMarkup:
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üö™ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")]
        ],
        resize_keyboard=True
    )

# ===========================
# /start
# ===========================
@router.message(Command("start"))
async def start_cmd(message: types.Message, state: FSMContext):
    with Session(engine) as session:
        user = session.exec(select(User).where(User.telegram_id == message.from_user.id)).first()
        if user:
            await message.bot.send_chat_action(message.chat.id, "typing")
            await asyncio.sleep(1)
            await message.answer(
                f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.name or '–¥—Ä—É–≥'} üëã\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
                reply_markup=main_menu_keyboard()
            )
            await state.clear()
            return

    # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–∏–≤–µ—Çüëãüèª"
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[[types.InlineKeyboardButton(text="–ü—Ä–∏–≤–µ—Çüëãüèª", callback_data="intro_hello")]]
    )

    photo_path_hello = "bot/assets/hello_photo.png"  # –ø—É—Ç—å –∫ —Ç–≤–æ–µ–º—É —Ñ–∞–π–ª—É –≤ –ø—Ä–æ–µ–∫—Ç–µ
    photo_hello = FSInputFile(photo_path_hello)


    text_hello = (
        "–ü—Ä–∏–≤–µ—Ç! ‚ú® –Ø –ê–ª–∏—Å–∞ ‚Äî –≤–∞—à –ª–∏—á–Ω—ã–π –±–æ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏. "
        "–Ø –Ω–∞ —Å–≤—è–∑–∏ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –∏ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å! ü§ù\n\n"
        "–û–±–æ –º–Ω–µ:\n"
        "‚Ä¢ –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ üõ°Ô∏è\n"
        "‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç ‚ö°\n"
        "‚Ä¢ –õ–∏—á–Ω—ã–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ üí¨\n"
        "‚Ä¢ –ó–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤ –∏ –∞–Ω–∞–ª–∏–∑ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ üîé\n"
        "‚Ä¢ –ù–∞ —Å–≤—è–∑–∏ 24/7 ‚è∞"
    )

    await message.answer_photo(
        photo=photo_hello,
        caption=text_hello,
        reply_markup=keyboard  # —Ç–≤–æ–∏ –∫–Ω–æ–ø–∫–∏
    )

    await state.set_state(UserForm.accept_intro)

# ===========================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–≤–µ—Çüëãüèª"
# ===========================
@router.callback_query(lambda c: c.data == "intro_hello")
async def intro_hello(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    try:
        await callback.message.delete()
    except:
        pass

    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[[types.InlineKeyboardButton(text="–î–∞‚úÖ", callback_data="accept_terms")]]
    )

    await callback.message.answer(
        "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –≤–∞–º –æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è —á—É–≤—Å—Ç–≤, –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ –ø–æ–º–æ—á—å –≤ –ø–æ–∏—Å–∫–µ –Ω–æ–≤—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤ –∫ –ª–∏—á–Ω—ã–º –ø—Ä–æ–±–ª–µ–º–∞–º üß†.\n\n"
        "–í–∞–∂–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –Ø –Ω–µ –∑–∞–º–µ–Ω—è—é –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –ø–æ–º–æ—â—å. –ï—Å–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—è —Å–µ—Ä—å–µ–∑–Ω–∞—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É ü©∫.\n\n"
        "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± —É—Å–ª–æ–≤–∏—è—Ö: https://telegra.ph/Usloviya-ispolzovaniya-Alisy-10-28\n\n"
        "–ü—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —É—Å–ª–æ–≤–∏—è? –ù–∞–∂–º–∏ '–î–∞' ‚úÖ.",
        reply_markup=keyboard
    )
    await state.set_state(UserForm.accept_terms)

# ===========================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–∞‚úÖ"
# ===========================
@router.callback_query(lambda c: c.data.startswith("mood_"))
async def mood_callback(callback: types.CallbackQuery):
    await callback.answer("–°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ...")
    user_id = callback.from_user.id
    mood_value = int(callback.data.split("_")[1])

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–º–∏—É–º–∞
    with Session(engine) as session:
        user = session.exec(select(User).where(User.telegram_id == user_id)).first()
        if not user or not user.is_premium:
            await callback.message.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üåü")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        user_mood = UserMood(user_id=user_id, mood=mood_value)
        session.add(user_mood)
        session.commit()

    await callback.message.answer(f"–°–ø–∞—Å–∏–±–æ! –¢–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ {mood_value} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ")

# ===========================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"
# ===========================
@router.callback_query(lambda c: c.data == "accept_terms")
async def accept_terms(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.delete()
    sent_message = await callback.message.bot.send_message(
        callback.from_user.id,
        "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? –ü—Ä–∏—à–ª–∏ –∏–º—è –±–µ–∑ –ø—Ä–æ—á–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ —Å–ª–æ–≤ ‚úèÔ∏è"
    )
    await state.update_data(name_message_id=sent_message.message_id)
    await state.set_state(UserForm.name)

# ===========================
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –∏–º—è, –ø–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç
# ===========================
@router.message(UserForm.name)
async def process_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –∏ —Å–∏–º–≤–æ–ª–æ–≤
    if len(name) > 10 or not re.match(r"^[–ê-–Ø–∞-—è–Å—ëA-Za-z]+$", name):
        await message.answer("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –±—ã—Ç—å –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 10 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(name=name)

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –ø–æ–ª
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[[types.InlineKeyboardButton(text="üë® –ú—É–∂—Å–∫–æ–π", callback_data="gender_m"),
                          types.InlineKeyboardButton(text="üë© –ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_f")]]
    )
    sent_message = await message.answer("–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=keyboard)
    await state.update_data(buttons_message_id=sent_message.message_id)
    await state.set_state(UserForm.gender)

@router.callback_query(lambda c: c.data in ["gender_m", "gender_f"])
async def process_gender(callback: types.CallbackQuery, state: FSMContext):
    gender = "–º" if callback.data == "gender_m" else "–∂"
    await state.update_data(gender=gender)

    data = await state.get_data()
    if "buttons_message_id" in data:
        try: await callback.message.delete()
        except: pass

    sent_message = await callback.message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? üìÖ")
    await state.update_data(age_message_id=sent_message.message_id)
    await state.set_state(UserForm.age)
    await callback.answer()

@router.message(UserForm.age)
async def process_age(message: types.Message, state: FSMContext):
    try:
        age = int(message.text)
    except ValueError:
        await message.answer("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:")
        return

    data = await state.get_data()
    user = User(
        telegram_id=message.from_user.id,
        name=data["name"],
        gender=data["gender"],
        age=age,
        is_active_dialog=False
    )
    with Session(engine) as session:
        session.add(user)
        session.commit()

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    for msg_id in [data.get("name_message_id"), data.get("buttons_message_id"), data.get("age_message_id")]:
        if msg_id:
            try: await message.bot.delete_message(message.chat.id, msg_id)
            except: pass

    await message.bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)
    await message.answer(
        f"–†–∞–¥ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {data['name']}! üëã\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=main_menu_keyboard()
    )
    await state.clear()

# ===========================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
# ===========================
@router.message(lambda m: m.text == "üó£ –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥")
async def start_dialog(message: types.Message):
    with Session(engine) as session:
        user = session.exec(select(User).where(User.telegram_id == message.from_user.id)).first()
        if user:
            user.is_active_dialog = True
            session.add(user)
            session.commit()

    await message.answer("–î–∏–∞–ª–æ–≥ –Ω–∞—á–∞—Ç. –ú–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å –≤—Å—ë, —á—Ç–æ —Ö–æ—á–µ—à—å –æ–±—Å—É–¥–∏—Ç—å üí¨", reply_markup=dialog_keyboard())

@router.message(lambda m: m.text == "üö™ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")
async def end_dialog(message: types.Message):
    with Session(engine) as session:
        user = session.exec(select(User).where(User.telegram_id == message.from_user.id)).first()
        if user:
            user.is_active_dialog = False
            session.add(user)
            session.commit()

    await message.answer("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=main_menu_keyboard())

@router.message(lambda m: m.text == "üìä –ú–æ–π –∞–Ω–∞–ª–∏–∑")
async def show_metrics(message: types.Message):
    user_id = message.from_user.id
    with Session(engine) as session:
        user = session.exec(select(User).where(User.telegram_id == user_id)).first()
        if not user or not user.is_premium:
            await message.answer("–†–∞–∑–¥–µ–ª –ú–µ—Ç—Ä–∏–∫–∏ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üåü")
            return

        # –°—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        avg_mood = get_weekly_average(user_id)
        avg_mood_text = f"{avg_mood:.2f}" if avg_mood else "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –µ—â–µ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è"

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        counter = session.exec(select(MessageCounter).where(MessageCounter.user_id == user.id)).first()
        messages_count = counter.total_messages if counter else 0

        # –ü—Å–∏—Ö–æ—Ç–∏–ø –∏ –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç
        result = await analyze_user_profile(user.id)
        psychotype_text = result["psychotype"]
        weekly_report_text = result["weekly_report"]

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        week_ago = datetime.utcnow() - timedelta(days=7)
        moods = session.exec(
            select(UserMood)
            .where(UserMood.user_id == user_id)
            .where(UserMood.created_at >= week_ago)
            .order_by(UserMood.created_at)
        ).all()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –º–µ—Ç—Ä–∏–∫
        metrics_text = (
            f"üìä –¢–≤–æ–∏ –º–µ—Ç—Ä–∏–∫–∏:\n\n"
            f"üé≠ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é: {avg_mood_text}\n"
            f"‚úâÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_count}\n"
            f"üß† –ü—Å–∏—Ö–æ—Ç–∏–ø: *{psychotype_text}*\n"
            f"ü™û –û—Ç—á—ë—Ç –∑–∞ –Ω–µ–¥–µ–ª—é: {weekly_report_text}"
        )

        if moods:
            dates = [m.created_at.strftime("%d.%m") for m in moods]
            values = [m.mood for m in moods]

            fig = go.Figure()
            fig.add_trace(go.Scatter(
                x=dates,
                y=values,
                mode='lines+markers',
                line=dict(color='#6C63FF', width=3),
                marker=dict(size=8, color='#FF6F61', line=dict(width=1, color='#fff')),
                fill='tozeroy',
                fillcolor='rgba(108,99,255,0.1)',
                name='–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ'
            ))
            fig.update_layout(
                title='üìà –î–∏–Ω–∞–º–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é',
                xaxis_title='–î–∞—Ç–∞',
                yaxis_title='–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (1‚Äì5)',
                yaxis=dict(range=[1, 5]),
                template='plotly_white',
                font=dict(size=12),
                height=350,
                margin=dict(l=30, r=30, t=60, b=30)
            )

            buf = io.BytesIO()
            fig.write_image(buf, format="png")
            buf.seek(0)
            photo = BufferedInputFile(buf.getvalue(), filename="mood_graph.png")

            await message.answer_photo(photo, caption=metrics_text, parse_mode="Markdown")
        else:
            await message.answer(metrics_text, parse_mode="Markdown")

@router.message(lambda m: m.text == "üìú –£—Å–ª–æ–≤–∏—è")
async def conditions(message: types.Message):
    await message.answer("üìú –î–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏ –ø–æ–ª–µ–∑–Ω–æ–π —Å—Ä–µ–¥—ã, —è –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—é—Å—å —Å—Ç—Ä–æ–≥–∏—Ö –ø—Ä–∞–≤–∏–ª.\n\n–í —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–∏–º–∏, —è –Ω–µ –º–æ–≥—É –≤–µ—Å—Ç–∏ –±–µ—Å–µ–¥—ã –Ω–∞ —Ç–µ–º—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∞—Ä–∫–æ—Ç–∏–∫–∞–º–∏, –æ—Ä—É–∂–∏–µ–º, –∞ —Ç–∞–∫–∂–µ —Å –ø—Ä–∏–∑—ã–≤–∞–º–∏ –∫ –Ω–∞—Å–∏–ª–∏—é –∏–ª–∏ —Å—É–∏—Ü–∏–¥—É. üôÖ‚Äç‚ôÇÔ∏è\n\n–ú–æ—è –≥–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –±—ã—Ç—å –¥–ª—è –≤–∞—Å –Ω–∞–¥—ë–∂–Ω—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π! ü§ù\n\nhttps://telegra.ph/Usloviya-ispolzovaniya-Alisy-10-28")

@router.message(lambda m: m.text == "‚ùì –í–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç")
async def faq(message: types.Message):
    text = (
        "‚ú® *–ö–∞–∫ —ç—Ç–æ —É—Å—Ç—Ä–æ–µ–Ω–æ?*\n\n"
        "–ú–µ–Ω—è –∑–æ–≤—É—Ç *–ê–ª–∏—Å–∞*, –∏ —è ‚Äî –ø—Ä–æ–¥—É–∫—Ç –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç–æ–∫ –≤ —Å—Ñ–µ—Ä–µ _–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞_.\n"
        "–í –æ—Å–Ω–æ–≤–µ –º–æ–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –ª–µ–∂–∞—Ç –æ–±—à–∏—Ä–Ω—ã–µ –∑–Ω–∞–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∏–∑—É—á–µ–Ω–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏—Ö —ç–º–æ—Ü–∏–π –∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏.\n\n"
        "–≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–Ω–µ –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ –≤ —Å–ª–æ–∂–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö: –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è –∏ –¥–∞–≤–∞—Ç—å *–ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã*.\n"
        "–í—Å–µ –æ—Ç–≤–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å, –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é ‚Äî –æ–Ω–∏ *—É–Ω–∏–∫–∞–ª—å–Ω—ã –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å*.\n\n"
        "–í –¥–∏–∞–ª–æ–≥–µ —è —Å—Ç–∞—Ä–∞—é—Å—å –≥–ª—É–±–∂–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Ç–≤–æ—ë–º –≤–æ–ø—Ä–æ—Å–µ, –≤—ã–¥–≤–∏–≥–∞—é –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω–∞—Ö —Ç—Ä—É–¥–Ω–æ—Å—Ç–µ–π –∏ —Å–ø–æ—Å–æ–±–∞—Ö –∏—Ö –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è. üçÉ\n"
        "–Ø —Ç–∞–∫–∂–µ –º–æ–≥—É –ø–æ–º–æ—á—å —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ–º, —É–ª—É—á—à–∏—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –Ω–∞–π—Ç–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –≥–∞—Ä–º–æ–Ω–∏—é.\n\n"
        "–ü—Ä–æ—Å—Ç–æ —Ä–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –æ —Ç–æ–º, —á—Ç–æ —Ç–µ–±—è –≤–æ–ª–Ω—É–µ—Ç.\n"
        "–ú–æ—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –±—É–¥–µ—Ç –ø–æ–ª–µ–∑–Ω–∞, –µ—Å–ª–∏ —Ç—ã:\n"
        "‚Ä¢ –∏—â–µ—à—å —Å–æ–≤–µ—Ç –∏–ª–∏ –ø–æ–º–æ—â—å –≤ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏–π,\n"
        "‚Ä¢ —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —Ç–µ–±—è –≤—ã—Å–ª—É—à–∞–ª–∏,\n"
        "‚Ä¢ –ø–µ—Ä–µ–∂–∏–≤–∞–µ—à—å —Å—Ç—Ä–µ—Å—Å, —Ç—Ä–µ–≤–æ–≥—É –∏–ª–∏ —Å–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è,\n"
        "‚Ä¢ –Ω—É–∂–¥–∞–µ—à—å—Å—è –≤ —Ç–æ–º, —á—Ç–æ–±—ã –≤—ã–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è.\n\n"
        "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –æ—Å–æ–∑–Ω–∞—Ç—å –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–±–ª–µ–º –∏ –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –ø—É—Ç–∏ –∏—Ö —Ä–µ—à–µ–Ω–∏—è.\n\n"
        "‚Äî ‚Äî ‚Äî\n\n"
        "üîí *–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã –ª–∏ –Ω–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è?*\n\n"
        "–î–∞, –∞–±—Å–æ–ª—é—Ç–Ω–æ. –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å - –≥–ª–∞–≤–Ω—ã–π –ø—Ä–∏–Ω—Ü–∏–ø –º–æ–µ–π —Ä–∞–±–æ—Ç—ã.\n"
        "–í—Å—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Ö—Ä–∞–Ω–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ *–≤ —Ç–≤–æ—ë–º –∞–∫–∫–∞—É–Ω—Ç–µ Telegram*, –∏ –Ω–∏–∫—Ç–æ, –∫—Ä–æ–º–µ —Ç–µ–±—è, –Ω–µ –∏–º–µ–µ—Ç –∫ –Ω–µ–π –¥–æ—Å—Ç—É–ø–∞.\n\n"
        "‚Äî ‚Äî ‚Äî\n\n"
        "üß† *–ú–æ–≥—É –ª–∏ —è –∑–∞–º–µ–Ω–∏—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∞?*\n\n"
        "–Ø –º–æ–≥—É —Å—Ç–∞—Ç—å *–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º –ø–µ—Ä–≤–æ–π –ø–æ–º–æ—â–∏*: –¥–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã—Å–∫–∞–∑–∞—Ç—å—Å—è, –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π.\n"
        "–û–¥–Ω–∞–∫–æ –ø—Ä–∏ —Å–µ—Ä—å—ë–∑–Ω—ã—Ö –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö —è *–Ω–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é* –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º—É –ø—Å–∏—Ö–æ–ª–æ–≥—É –∏–ª–∏ –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç—É.\n\n"
        "‚Äî ‚Äî ‚Äî\n\n"
        "üíé *–ß—Ç–æ –¥–∞—ë—Ç Premium-–ø–æ–¥–ø–∏—Å–∫–∞?*\n\n"
        "–ü—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç:\n"
        "‚Ä¢ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å–æ –º–Ω–æ–π,\n"
        "‚Ä¢ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è,\n"
        "‚Ä¢ —É–º–Ω—É—é –º–µ—Ç—Ä–∏–∫—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.\n\n"
        "–û—Ñ–æ—Ä–º–∏–≤ –ø–æ–¥–ø–∏—Å–∫—É, —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ –ø—Ä–∏—è—Ç–Ω—É—é –±–µ—Å–µ–¥—É –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫,\n"
        "–∞ —Ç–∞–∫–∂–µ –ø–æ–º–æ–≥–∞–µ—à—å –º–æ–µ–º—É —Ä–∞–∑–≤–∏—Ç–∏—é –∏ —É–ª—É—á—à–µ–Ω–∏—é.\n\n"
        "‚Äî ‚Äî ‚Äî\n\n"
        "üõ†Ô∏è *–ö—É–¥–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞?*\n\n"
        "–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ —Ç—ã —Å—Ç–æ–ª–∫–Ω—É–ª—Å—è —Å –æ—à–∏–±–∫–æ–π ‚Äî –Ω–∞–ø–∏—à–∏ —Å—é–¥–∞:\n"
        "üëâ [@stradiesh]\n\n"
        "‚Äî ‚Äî ‚Äî\n\n"
        "üìå *–ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?*\n\n"
        "–ü–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞ —Å–∞–º–∞ –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–æ –Ω–æ–≤–æ–π —É–ø–ª–∞—Ç—ã.\n"
        "–≠—Ç–æ –±—ã—Å—Ç—Ä–æ –∏ –ø—Ä–æ—Å—Ç–æ üí´"
    )
    await message.answer(text, parse_mode="Markdown", disable_web_page_preview=True)


@router.message(lambda m: m.text == "üíé –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞")
async def premium(message: types.Message):
    user_id = message.from_user.id

    with Session(engine) as session:
        user = session.exec(select(User).where(User.telegram_id == user_id)).first()

        if user and user.is_premium and user.premium_until and user.premium_until > datetime.utcnow():
            expire_date = user.premium_until.strftime("%d.%m.%Y")
            await message.answer(f"üíé –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–æ: *{expire_date}*", parse_mode="Markdown")
            return

        first_plan_purchased = session.exec(
            select(PaymentHistory)
            .where(PaymentHistory.user_id == user.id)
            .where(PaymentHistory.plan == "1m")
        ).first()


        buttons = []
        if not first_plan_purchased:
            buttons.append([types.InlineKeyboardButton(
                text="üöÄ 1 –º–µ—Å—è—Ü ‚Äî 99‚ÇΩ (–¢–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤)",
                callback_data="buy_premium_1m"
                )])
        else:
            buttons.append([types.InlineKeyboardButton(
                text="üöÄ 1 –º–µ—Å—è—Ü ‚Äî 320‚ÇΩ",
                callback_data="buy_premium_1m_old"
                )])
        buttons.append([types.InlineKeyboardButton(
            text="üíé 3 –º–µ—Å—è—Ü–∞ ‚Äî 950‚ÇΩ (—Å–∫–∏–¥–∫–∞ 22%)",
            callback_data="buy_premium_3m"
        )])
        buttons.append([types.InlineKeyboardButton(
            text="üëë 12 –º–µ—Å—è—Ü–µ–≤ ‚Äî 3700‚ÇΩ (—Å–∫–∏–¥–∫–∞ 39%)",
            callback_data="buy_premium_12m"
        )])

        keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)


    text = (
        "üíé *Premium –ø–æ–¥–ø–∏—Å–∫–∞* –¥–∞–µ—Ç —Ç–µ–±–µ:\n\n"
        "‚ú® –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "üó£Ô∏è –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n"
        "üé≠ –î–æ—Å—Ç—É–ø –∫ –ª–∏—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –∏ –∞–Ω–∞–ª–∏–∑—É\n"
        "üí° –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã\n"
        "üöÄ –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã\n\n"
        "–í—ã–±–µ—Ä–∏ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ üëá"
    )
    
  

    photo_path = "bot/assets/premium.png"  # –ø—É—Ç—å –∫ —Ç–≤–æ–µ–º—É —Ñ–∞–π–ª—É –≤ –ø—Ä–æ–µ–∫—Ç–µ
    photo = FSInputFile(photo_path)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer_photo(
        photo=photo,
        caption=text,
        parse_mode="Markdown",
        reply_markup=keyboard
    )
