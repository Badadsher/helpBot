from aiogram import Router, types
from datetime import datetime, timedelta
from sqlmodel import Session, select
from bot.db import engine
from bot.models.user import User
from bot.models.payment import PaymentHistory
from bot.config import settings

router = Router()

# ===============================
# –°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞ –Ω–∞ –ø—Ä–µ–º–∏—É–º
# ===============================
@router.callback_query(lambda c: c.data.startswith("buy_premium_"))
async def buy_premium(callback: types.CallbackQuery):
    await callback.answer()  # —É–±–∏—Ä–∞–µ–º "–∫—Ä—É—Ç–∏–ª–∫—É" —É –∫–Ω–æ–ø–∫–∏
    plan = callback.data.split("_")[2]  # 1m / 3m / 12m

    plan_map = {
        "1m": {"days": 30, "price": 99_00, "title": "–ü—Ä–µ–º–∏—É–º –Ω–∞ 1 –º–µ—Å—è—Ü"},
        "3m": {"days": 90, "price": 990_00, "title": "–ü—Ä–µ–º–∏—É–º –Ω–∞ 3 –º–µ—Å—è—Ü–∞"},
        "12m": {"days": 365, "price": 4990_00, "title": "–ü—Ä–µ–º–∏—É–º –Ω–∞ 12 –º–µ—Å—è—Ü–µ–≤"},
    }

    info = plan_map.get(plan)
    if not info:
        await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with Session(engine) as session:
        user = session.exec(select(User).where(User.telegram_id == callback.from_user.id)).first()
        if not user:
            await callback.message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return
        user_db_id = user.id

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—á–µ—Ç —Å payload = –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID
    await callback.bot.send_invoice(
        chat_id=callback.from_user.id,
        title=info["title"],
        description="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø—Å–∏—Ö–æ–±–æ—Ç–∞ üíé",
        payload=f"premium_{plan}_{user_db_id}",  # payload —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID
        provider_token=settings.provider_token,  
        currency="RUB",
        prices=[types.LabeledPrice(label=info["title"], amount=info["price"])],
        start_parameter="premium-subscription"
    )

# ===============================
# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã (pre_checkout)
# ===============================
@router.pre_checkout_query(lambda q: True)
async def pre_checkout(pre_checkout_query: types.PreCheckoutQuery):
    # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º Telegram
    await pre_checkout_query.answer(ok=True)

# ===============================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
# ===============================
@router.message(lambda m: m.successful_payment is not None)
async def successful_payment(message: types.Message):
    payment = message.successful_payment
    payload = payment.invoice_payload  # –Ω–∞–ø—Ä–∏–º–µ—Ä "premium_1m_42"
    
    try:
        _, plan, user_db_id_str = payload.split("_")
        user_db_id = int(user_db_id_str)
    except Exception:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π payload.")
        return

    duration_map = {"1m": 31, "3m": 92, "12m": 365}
    days = duration_map.get(plan, 30)

    with Session(engine) as session:
        user = session.exec(select(User).where(User.id == user_db_id)).first()
        if not user:
            await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return

        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–µ–º–∏—É–º
        user.is_premium = True
        user.premium_until = datetime.utcnow() + timedelta(days=days)
        session.add(user)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂
        payment_record = PaymentHistory(
            user_id=user.id,
            amount=payment.total_amount / 100,  # –≤ —Ä—É–±–ª—è—Ö
            currency=payment.currency,
            duration_days=days,
            created_at=datetime.utcnow()
        )
        session.add(payment_record)
        session.commit()

        until_str = user.premium_until.strftime("%d.%m.%Y")
        await message.answer(
            f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! üíé\n"
            f"–¢–≤–æ—è –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ *{until_str}*. –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏!",
            parse_mode="Markdown"
        )
